import django_tables2 as tables
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect, render
from django_filters.views import FilterView

from .filters import TicketFilter
from .forms import TicketAttachmentForm, TicketCommentForm, TicketForm
from .models import Reference, Ticket, TicketAttachment
from .tables import TicketTable


class AllTickets(LoginRequiredMixin, tables.SingleTableMixin, FilterView):
    model = Ticket
    table_class = TicketTable
    filterset_class = TicketFilter
    template_name = "tickets/all-user-tickets.html"
    paginate_by = 2

    def get_queryset(self, **kwargs):
        # Override queryset method to filter tickets by authenticated user.
        qs = super().get_queryset(**kwargs)
        self.filterset = TicketFilter(data=self.request.GET, queryset=qs.order_by("-created_at"), request=self.request)
        return self.filterset.qs

    def get_template_names(self):
        if self.request.htmx:
            template_name = "tickets/table/ticket-table-partial.html"
        else:
            template_name = "tickets/all-user-tickets.html"

        return template_name

    def get_context_data(self, **kwargs):
        # Add form generated by filterset to the context
        context = super().get_context_data(**kwargs)
        context["filter_form"] = self.filterset.form
        context["page"] = "all-tickets"
        return context


@login_required
def ticket_details(request, ticket_number):
    selected_ticket = get_object_or_404(Ticket, ticket_number=ticket_number)
    ticket_comments = selected_ticket.comments.all().order_by("-created_at")
    ticket_file_count = selected_ticket.attachments.all().count()

    comment_form = TicketCommentForm()
    attachment_form = TicketAttachmentForm(new_ticket=False)
    ticket_form = TicketForm(instance=selected_ticket)
    if request.method == "POST":
        # Only ticket author is allowed to make modifications
        if request.user != selected_ticket.created_by:
            messages.error(request=request, message="You are not authorized to perform this action.")
            return redirect(to="ticket-details", ticket_number=ticket_number)

        if "add-comment" in request.POST:
            comment_form = TicketCommentForm(data=request.POST)
            if comment_form.is_valid():
                comment = comment_form.save(commit=False)
                comment.created_by = request.user
                comment.ticket = selected_ticket
                comment.save()
                messages.success(request=request, message="Your comment was posted successfully.")
                return redirect(to="ticket-details", ticket_number=ticket_number)
        elif "add-attachment" in request.POST:
            attachment_form = TicketAttachmentForm(
                data=request.POST, files=request.FILES, file_count=ticket_file_count, new_ticket=False
            )
            if attachment_form.is_valid():
                files = attachment_form.cleaned_data.get("attachment")
                create_attachment(files=files, ticket=selected_ticket)
                messages.success(request=request, message="Attachment has been added successfully.")
                return redirect(to="ticket-details", ticket_number=ticket_number)
            else:
                # https://docs.djangoproject.com/en/5.0/ref/forms/api/#django.forms.ErrorList.as_text
                error = attachment_form.errors.get("attachment").as_text().replace("*", "")
                messages.error(request=request, message=error)
        elif "edit-ticket" in request.POST:
            ticket_form = TicketForm(instance=selected_ticket, data=request.POST)
            if ticket_form.is_valid():
                selected_ticket._change_reason = "Ticket details have been updated."
                ticket_form.save()
                messages.success(request=request, message="Change saved successfully.")
            else:
                messages.error(
                    request=request, message="Ticket Update failed. Please make sure to answer all required fields."
                )

    context = {
        "selected_ticket": selected_ticket,
        "comment_form": comment_form,
        "attachment_form": attachment_form,
        "ticket_form": ticket_form,
        "ticket_comments": ticket_comments,
    }
    return render(request=request, template_name="tickets/ticket-detail.html", context=context)


def create_attachment(files, ticket):
    """This function accepts a list of Files object

    Args:
        request (_type_): _description_
        files (list): _description_
        ticket (_type_): _description_
    """

    for file in files:
        TicketAttachment.objects.create(attachment=file, ticket=ticket)


@login_required
def create_ticket(request):
    if request.method == "POST":
        ticket_form = TicketForm(data=request.POST, files=request.FILES)
        attachment_form = TicketAttachmentForm(data=request.POST, files=request.FILES, file_count=0, new_ticket=True)
        if ticket_form.is_valid() and attachment_form.is_valid():
            ticket = ticket_form.save(commit=False)
            ticket.created_by = request.user
            ticket.ticket_number = Reference.generate(prefix="INC")
            ticket._change_reason = "Ticket has been created."
            ticket.save()

            files = attachment_form.cleaned_data["attachment"]
            create_attachment(files=files, ticket=ticket)
            messages.success(
                request=request,
                message=(
                    f"Your ticket {ticket.ticket_number} has been created. Our support team will get back to you as"
                    " soon as possible."
                ),
            )
            return redirect(to="ticket-details", ticket_number=ticket.ticket_number)
    else:
        ticket_form = TicketForm()
        attachment_form = TicketAttachmentForm(file_count=0, new_ticket=True)

    context = {"ticket_form": ticket_form, "attachment_form": attachment_form}
    return render(request=request, template_name="tickets/create-ticket.html", context=context)


@login_required
def delete_attachment(request, ticket_number, pk):
    attachment = get_object_or_404(TicketAttachment, id=pk)

    if request.user == attachment.ticket.created_by:
        attachment.delete()
        messages.success(request=request, message="Attachment has been deleted successfully.")
    else:
        messages.error(request=request, message="You are not authorized to perform this action.")
    return redirect(to="ticket-details", ticket_number=ticket_number)


@login_required
def assign_ticket(request, ticket_number):
    selected_ticket = get_object_or_404(Ticket, ticket_number=ticket_number)
    if request.user.role == 1 or request.user.role == 2:
        selected_ticket.assign_agent(user=request.user)
        selected_ticket.set_status_assigned()
        selected_ticket.save()
        messages.success(request=request, message="You've successfully accepted this ticket.")
    else:
        messages.error(request=request, message="You are not authorized to accept this ticket.")
    return redirect(to="ticket-details", ticket_number=ticket_number)


@login_required
def update_ticket_status(request, ticket_number):
    selected_ticket = get_object_or_404(Ticket, ticket_number=ticket_number)
    if request.user.role == 1 or request.user.role == 2:
        if "start" in request.POST or "resume" in request.POST:
            selected_ticket.set_status_in_progress()
            selected_ticket.save()
            messages.success(request=request, message="This ticket is now In Progress.")
        elif "close" in request.POST:
            selected_ticket.set_status_close()
            selected_ticket.save()
            messages.success(request=request, message="This ticket is now closed.")
        elif "resolve" in request.POST:
            selected_ticket.set_status_resolved()
            selected_ticket.save()
            messages.success(request=request, message="This ticket is now resolved.")
        elif "hold" in request.POST:
            selected_ticket.set_status_on_hold()
            selected_ticket.save()
            messages.success(request=request, message="This ticket is now on hold status.")
        elif "reopen" in request.POST:
            selected_ticket.set_status_open()
            if selected_ticket.assigned_agent:
                messages.success(
                    request=request,
                    message=f"Ticket has been reopened and reassigned to {selected_ticket.assigned_agent}.",
                )
            else:
                messages.success(request=request, message="This ticket has been opened.")
            selected_ticket.save()
    else:
        messages.error(request=request, message="You are not authorized to accept this ticket.")
    return redirect(to="ticket-details", ticket_number=ticket_number)
